  NOTES - 9/6/2019
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
method that reads interprets the string literls -> (the text between the double quotations)
method -> action
keyword -> reserved words from java
Java requires a type for a variable for allocating pieces in the RAM ****EFFICIENCY 
     -> Preidcting exact size for data

2 billion range for Java integer
Concatenation -> adding a bunch of strings 

Strings:
"
'
/ -> Infront of one character ignore special qualities 
    System.out.println("\"whatever\"");
    -> \n new line in the text
    -> \'
    -> \\

Coding Conventions
    TitleCase -> TitleEverything
        -> Naming: Classes, Files
    camelCase -> titleEverythingOtherThenTheFirst
        -> Naming: Variables, Custom Methods
    Snake_Case -> Title_only_the_first_word
        ->Big no no in java
    
    Each code block should be indented ALT + Shift + F
    Variable put on the top

Grading
    1 point - Does it run?
    1 point - Does it follow the assignment?
    1 point - Comments 
    1 point - Following code conventions

Operator Precedence = PEMDAS
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9/13/19 - Notes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Primitive Types
    -> byte
        - minimum value of -128 to 128
    -> short
        - 16 bit -32768
    -> integer
        - 32 bit
    -> long
        - 64 bit
    -> float
        - single precision 32-bit for decimals
    -> boolean
        - true or false
    -> char
        - a single 16-bit Unicode character
AP Primitive Types 
    -> integer = whole number
    -> double = fractions/decimals
    -> boolean = true/false
Operators
    -> % = modulo 
        - 5th basic math Operator
        - returns the remainder in division
        - useful examples:
            + determining even and odd numbers
            + jump around by various numbers
    -> = = Compound Assignment Operators  
        - numOfBear = numOfBears + 36;
        - numOfBears += 36;
        +=, -=, *=, /+, %=
    -> ++ = Increment Operator
        - increases number by one
    -> -- = Decrement Operator
        - decreases number by one
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9/16/19 - Notes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Casting - make one variable type to a different one
    -> int y = 0;
    -> double x = (double) y;
Integer Overflow - when going beyond 2,147,483,647, it goes around to -2,147,483,648
Constant - They cannot vary
    -final int = 0;
    -constant will always be all caps
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9/19/19 - Notes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Object Oriented Programming - OOP
    Java is object oriented
    Everything is either an object or part of an object
Object - instance of a class
    Class defines an object
A class is defined set of attributes and methods (Cookie Cutter)
    - attritube is properties or variables (DATA)
    - method is behavior or functions
Object is the Cookie
    -System in System.out.print is a class 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9/24/19 - Notes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Instantiating - creating objects
Dot notation - allows us to access methods of Classes
Accessing Values
    -> Null = does not exist
    -> Constructors of classes have the same name as the class
    -> Overload = one object multiple Constructors
    -> Signature = parameters in a object's constructors
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
9/30/19 - Notes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Void = Nothing
    -> Keyword that method will return nothing
return = Getting something back out of a method
    -> hand back a value and then exits a method
